
class Solution {
    public TreeNode buildTree(int[] inorder, int[] postorder) {
        if(inorder == null || postorder == null) return null;
        return helper(inorder, 0, inorder.length-1, postorder, postorder.length-1);
    }
    
    private TreeNode helper(int[] inorder, int inStart, int inEnd, int[] postorder, int postEnd) {
        if(inStart > inEnd || postEnd < 0) return null;
        int inIdx = 0;
        for(int i=0; i<inorder.length; i++) {
            if(inorder[i] == postorder[postEnd]) {
                inIdx = i;
                break;
            }
        }
        TreeNode root = new TreeNode(postorder[postEnd]);
        root.left = helper(inorder, inStart, inIdx-1, postorder, postEnd - (inEnd - inIdx) - 1);
        root.right = helper(inorder, inIdx+1, inEnd, postorder, postEnd-1);
        return root;
    }
}

// Time O(N) , 
// Space O(N)       
