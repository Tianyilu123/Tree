
class Solution {
    private int max = 0;
    
    public int longestConsecutive(TreeNode root) {
        helper(root);
        return max;
    }
    
    private int[] helper(TreeNode root) {
        if(root == null)
            return new int[]{0,0};
        int[] left = helper(root.left);
        int[] right = helper(root.right);
        int[] res = new int[]{1,1}; // one bigger, one smaller;
        
        if(root.left != null) {
            if(root.val + 1 == root.left.val) {
                res[0] = left[0] + 1;
            } else if(root.val - 1 == root.left.val) {
                res[1] = left[1] + 1;
            }
        }
        if(root.right != null) {
            if(root.val + 1 == root.right.val) {
                res[0] = Math.max(res[0], 1+right[0]);
            } else if(root.val - 1 == root.right.val) {
                res[1] = Math.max(res[1], 1+right[1]);
            }
        }
        max = Math.max(res[0] + res[1] - 1, max);
        return res;
    }
}
