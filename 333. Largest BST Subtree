
class Solution {
    int res = 0;
    public int largestBSTSubtree(TreeNode root) {
        if(root == null) return 0;
        helper(root);
        return res;
    }
    
    private searchNode helper(TreeNode root) {
        if(root == null)
            return new searchNode(0, Integer.MAX_VALUE, Integer.MIN_VALUE);
        searchNode left = helper(root.left);
        searchNode right = helper(root.right);
        if(left.size == -1 || right.size == -1 || root.val <= left.upper
                                                    || root.val >= right.lower) {
            return new searchNode(-1, 0, 0);
        }
        
        int size = left.size + right.size + 1;
        res = Math.max(size, res);
        return new searchNode(size, Math.min(left.lower, root.val), Math.max(right.upper, root.val));
    }
    
    class searchNode {
        int size, lower, upper;
        searchNode(int size, int lower, int upper) {
            this.size = size;
            this.lower = lower;
            this.upper = upper;
        }
    }
}

// time: O(n);
// space: O(n);
